"""Test code generation command."""

import os
import sys
from textwrap import dedent

from pytest import mark

pytestmark = mark.skipif(sys.version_info < (3, 13), reason="Verify only on the latest version")


def test_generate(testdir):
    """Test if the code is generated by a given feature."""

    features = testdir.mkdir("scripts")
    feature = features.join("generate.feature")
    feature.write_text(
        # language=gherkin
        """\
        Feature: Code generation

            Scenario: Given and when using the same fixture should not evaluate it twice
                Given I have an empty list
                And 1 have a fixture (appends 1 to a list) in reuse syntax

                When I use this fixture

                Then my list should be [1]
        """,
        "utf-8",
        ensure=True,
    )

    result = testdir.runpytest("--generate", "--feature", os.path.join("scripts", "generate.feature"))
    assert (
        result.stdout.str().strip()
        == dedent(
            # language=python
            f'''\
            """Code generation feature tests."""

            from pathlib import Path

            from pytest_bdd import (
                scenario,
                given,
                when,
                then,
                step,
            )


            @scenario(Path('scripts'''
            f"{os.path.sep}"
            '''generate.feature'), 'Given and when using the same fixture should not evaluate it twice')
            def test_given_and_when_using_the_same_fixture_should_not_evaluate_it_twice():
                """Given and when using the same fixture should not evaluate it twice."""


            @given('1 have a fixture (appends 1 to a list) in reuse syntax')
            def have_a_fixture_appends_1_to_a_list_in_reuse_syntax():
                """1 have a fixture (appends 1 to a list) in reuse syntax."""
                raise NotImplementedError


            @given('I have an empty list')
            def i_have_an_empty_list():
                """I have an empty list."""
                raise NotImplementedError


            @when('I use this fixture')
            def i_use_this_fixture():
                """I use this fixture."""
                raise NotImplementedError


            @then('my list should be [1]')
            def my_list_should_be_1():
                """my list should be [1]."""
                raise NotImplementedError
            '''
        ).strip()
    )


def test_generate_with_quotes(testdir):
    """Test that code generation escapes quote characters properly."""
    testdir.makefile(
        ".feature",
        # language=gherkin
        generate_with_quotes='''\
        Feature: Handling quotes in code generation

            Scenario: A step definition with quotes should be escaped as needed
                Given I have a fixture with 'single' quotes
                And I have a fixture with "double" quotes
                And I have a fixture with single-quote \'\'\'triple\'\'\' quotes
                And I have a fixture with double-quote """triple""" quotes

                When I generate the code

                Then The generated string should be written
        ''',
    )

    result = testdir.runpytest("--generate", "--feature", "generate_with_quotes.feature")
    assert (
        result.stdout.str().strip()
        == dedent(
            # language=python
            '''\
            """Handling quotes in code generation feature tests."""

            from pathlib import Path

            from pytest_bdd import (
                scenario,
                given,
                when,
                then,
                step,
            )


            @scenario(Path('generate_with_quotes.feature'), 'A step definition with quotes should be escaped as needed')
            def test_a_step_definition_with_quotes_should_be_escaped_as_needed():
                """A step definition with quotes should be escaped as needed."""


            @when('I generate the code')
            def i_generate_the_code():
                """I generate the code."""
                raise NotImplementedError


            @given('I have a fixture with "double" quotes')
            def i_have_a_fixture_with_double_quotes():
                """I have a fixture with "double" quotes."""
                raise NotImplementedError


            @given('I have a fixture with \\'single\\' quotes')
            def i_have_a_fixture_with_single_quotes():
                """I have a fixture with 'single' quotes."""
                raise NotImplementedError


            @given('I have a fixture with double-quote """triple""" quotes')
            def i_have_a_fixture_with_doublequote_triple_quotes():
                """I have a fixture with double-quote \\"\\"\\"triple\\"\\"\\" quotes."""
                raise NotImplementedError


            @given('I have a fixture with single-quote \\'\\'\\'triple\\'\\'\\' quotes')
            def i_have_a_fixture_with_singlequote_triple_quotes():
                """I have a fixture with single-quote \'\'\'triple\'\'\' quotes."""
                raise NotImplementedError


            @then('The generated string should be written')
            def the_generated_string_should_be_written():
                """The generated string should be written."""
                raise NotImplementedError
            '''
        ).strip()
    )


def test_unicode_characters(testdir, monkeypatch):
    """Test generating code with unicode characters.

    Primary purpose is to ensure compatibility with Python2.
    """

    testdir.makefile(
        ".feature",
        # language=gherkin
        unicode_characters="""\
            Feature: Generating unicode characters

                Scenario: Calculating the circumference of a circle
                    Given We have a circle
                    When We want to know its circumference
                    Then We calculate 2 * ℼ * 𝑟
            """,
    )

    result = testdir.runpytest("--generate", "--feature", "unicode_characters.feature")
    expected_output = dedent(
        # language=python
        '''\
        """Generating unicode characters feature tests."""

        from pathlib import Path

        from pytest_bdd import (
            scenario,
            given,
            when,
            then,
            step,
        )


        @scenario(Path('unicode_characters.feature'), 'Calculating the circumference of a circle')
        def test_calculating_the_circumference_of_a_circle():
            """Calculating the circumference of a circle."""


        @then('We calculate 2 * ℼ * 𝑟')
        def we_calculate_2__ℼ__𝑟():
            """We calculate 2 * ℼ * 𝑟."""
            raise NotImplementedError


        @given('We have a circle')
        def we_have_a_circle():
            """We have a circle."""
            raise NotImplementedError


        @when('We want to know its circumference')
        def we_want_to_know_its_circumference():
            """We want to know its circumference."""
            raise NotImplementedError
        '''
    ).strip()
    assert result.stdout.str().strip() == expected_output
